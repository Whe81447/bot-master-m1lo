//Load required classes.
const { Sessions, Servers } = require('alta-jsapi');
const { WebsocketBot } = require('att-bot-core');
const { BasicWrapper, Connection } = require('att-websockets');
const Discord = require('discord.js');
const moment = require('moment');
const sha512 = require('crypto-js/sha512');
const fs = require('fs');

//Local classes
const Player = require('./src/player.js');
const Subscriptions = require('./src/subscriptions.js');

//Load information from credentials and config
const { username, password, botToken } = require("./credentials");
const { targetServer, showAllServers, blacklistServers, discordPrefix, discordChannels, discordRoles } = require("./config");


//NeDB
var Datastore = require('nedb');
var players = new Datastore({ filename : 'data/players.db', autoload: true });
var kills = new Datastore({ filename : 'data/playerkills.db', autoload: true });
var chunkHistory = new Datastore({ filename : 'data/chunkhistory.db', autoload: true });
var spawnables = new Datastore({ filename : 'data/spawnables.db', autoload: true });
players.ensureIndex({ fieldName: 'id', unique: 'true' });
players.persistence.setAutocompactionInterval( 129600 );
spawnables.ensureIndex({ fieldName: 'hash', unique: 'true' });

var connectInterval = 30000; // milliseconds
var serverPingInterval = 30000; // ms
var subscriptionConnectInterval = 10000; //ms
var serverConnectedState = false;
var subscriptionsActive = false;
var botConnection = {};
var pendingCommandList = [];

//Some utility helper functions and prototypes
function ts()
{ 
    return "["+ moment().format("h:mm:ss A") +"] " 
}

function strrep( str, n )
{
    if ( n < 1 ) return '';
    var result = str;
    while( n-- > 0 )
    {
        result += str;
    }
    return result;
}

// Database helpers
function insertHandler( err, doc )
{
    if ( err ) { console.log( err ); }
}

function updateHandler( err, rows )
{
    if ( err ) { console.log( err ); }
}

function convertPassToHash( username, password, botToken )
{
    // The SHA512 hash generated by crypto-js/sha512 will be 128 characters
    if ( password.length !== 128 )
    {
        console.log( "Plaintext password encountered, converting to SHA512 hash for permanent storage" );
        newPass = sha512( password ).toString();
        newFile = { "username" : username, "password" : newPass, "botToken": botToken };
        fs.writeFile('./credentials.json', JSON.stringify( newFile, null, 4 ), function( err ) {
            if ( err )
            {
                console.log( err );
            } else {
                console.log( "New credentials.json saved" );
            }
        });
        password = newPass;
    }
    return password;
}


//Command list
const commands = {
    'ping': (message, args) =>
    {
        message.channel.send("pong");
    },

    'where': (message, args) =>
    {
        while ( args.length && args[0].toLowerCase() === "is" )
        {
            argv = args.shift();
        }

        var username = args.join(' ');
        players.findOne({ username: username }, function( err, player ) {
            if ( err )
            {
                console.log( err );
            } else if ( !!player && player.lastChunk !== undefined ) {
                message.channel.send( '```'+ username +" was last seen at "+ player.lastChunk +'```');
            } else {
                message.channel.send( '```'+ "No location known for "+ username +'```' );
            }
        });
    },

    'who': (message, args) =>
    {
        while( args.length && args[0].toLowerCase() === "is" )
        {
            argv = args.shift();
        }

        var username = args.join(' ');
        players.findOne({ username: username }, function( err, player ) {
            if ( err ) 
            {
                console.log( err );
            } else {
                if ( !player )
                {
                    message.channel.send('```'+ "Unknown user: "+ username +'```');
                } else if ( !player.bio ) { 
                    message.channel.send('```'+ username +" does not have a bio"+ '```');
                } else {
                    message.channel.send('```'+ username +" is "+ player.bio +'```');
                }
            }
        });
    },

    'bio': (message, args) =>
    {
        console.log( args );
        function updatePlayerBio( playerid, bio )
        {
            players.update({ id: playerid }, { $set: { bio: bio } }, {}, function( err, numReplaced ) {
                if ( err )
                {
                    console.log( err );
                } else {
                    message.channel.send('```'+ username +" is "+ bio +'```');
                }
            });
        }

        var username = message.author.username;
        players.findOne({ username: username }, function( err, player ) {
            if ( err ) {
                console.log( err );
            }
            console.log( player );
            if ( player )
            {
                while ( args[0] === username || args[0] === "is" )
                {
                    args.shift();
                }
                var bio = args.join(' ');
                updatePlayerBio( player.id, bio );
            } else {            
                username = args.shift();
                while( args[0] === "is" ) { args.shift(); }
                var bio = args.join(' ');
                players.findOne({ username, username }, function( err, player ) {
                    if ( player )
                    {
                        updatePlayerBio( player.id, bio )
                    } else {
                        message.channel.send('```'+ "Unknown user: "+ username +'```');
                    }
                });
            }
        });
    },

    'servers': async function (message, args)
    {
        var servers = await Servers.getOnline();

        if ( !!servers )
        {
            var longest = 0;
            for( var i in servers )
            {
                if ( servers[i].name.length > longest )
                {
                    longest = servers[i].name.length;
                }
            }

            var serverNameLen = longest + 1;
            var listTable =  "| Servers"+ strrep(' ', (serverNameLen - 7)) +"| Players\n";
                listTable += "|"+ strrep('-', (serverNameLen + 1) ) +"|---------\n";
            for ( var i in servers )
            {
                if ( blacklistServers.includes( servers[i].id ) )
                {
                    continue
                }
                if ( !showAllServers && !targetServers.includes( servers[i].id ) )
                { 
                    continue 
                }
                listTable += "| "+ servers[i].name + strrep(' ', ( serverNameLen - servers[i].name.length )) +"| "+ servers[i].online_players.length +"\n";
            }
        
            message.channel.send( '```'+ listTable +'```' );
                   
        } else {
            message.channel.send("No servers appear to be online, perhaps it's patch day?");
        }
    },

    'players': async function (message, args)
    {
        var servers = await Servers.getOnline();
        var listTable = '';

        while ( args.length && ( args[0].toLowerCase() === "online" || args[0].toLowerCase() === "in" || args[0].toLowerCase() === "on" ) )
        {
            args.shift();
        }

        var mustMatch = args.join(' ');

        for( var i in servers )
        {
            var pOnline = servers[i].online_players;
            if ( pOnline.length <= 0 && !mustMatch ) 
            {
                continue
            }

            if ( blacklistServers.includes( servers[i].id ) )
            {
                continue;
            }

            if ( !showAllServers && !targetServers.includes( servers[i].id ) )
            {
                continue;
            }
            
            if ( mustMatch )
            {
                var re = new RegExp( mustMatch, 'ig' );
                if ( !servers[i].name.match( re ) )
                {
                    continue;
                }
            }
                       
            listTable += "| "+ servers[i].name +"\n";
            listTable += "|"+ strrep('-', (servers[i].name.length + 1)) +"\n";     

            if ( pOnline.length <= 0 )
            {
                listTable += "| No players online\n"
            } else {
                for( var n in pOnline )
                {
                    listTable += "| "+ pOnline[n].username +"\n";
                }
            }

            listTable += "\n";
        }

        if ( listTable === '' )
        {
            if ( mustMatch )
            {
                message.channel.send('```No server found matching "'+ mustMatch +'"```');
            } else {
                message.channel.send('```No servers were found online, is it patch day?```');
            }
        } else {
            message.channel.send('```'+ listTable +'```');
        }
    },

    'zone': async function (message, args)
    {
        switch( args.shift() )
        {
            case 'history':
                var chunkName = args.join(' ');
                players.find({}, function( err, playerList ) {
                    chunkHistory.find({ chunk: chunkName }).sort({ ts: -1 }).exec( function( err, chunklist ) {
                        if ( err )
                        {
                            console.log( err );
                        } else if ( !chunklist ) {
                            message.channel.send('```'+ "No history for zone '"+ chunkName +"'"+ '```');
                        } else {
                            var response  = "| Players who have recently visited zone '"+ chunkName +"'\n";
                                response += "|--------------------------------"+ strrep( '-', chunkName.length ) +"-\n";
                            let limit = 1500;
                            if ( chunklist.length < limit ) { limit = chunklist.length; }
                            for ( var i = 0; i < limit; i++ ) {
                                ichunk = chunklist[i];
                                if ( ++i > 10 ) { }
                                player = playerList.find( x => x.id === ichunk.player );
                                response += "|["+ moment( ichunk.ts ).format("YYYY/MM/DD HH:mm:ss") +"] "+ player.username +"\n";
                                if ( response.length > 1900 ) {
                                    message.channel.send('```'+ response +'```');
                                    response = "|--------------------------------"+ strrep( '-', chunkName.length ) +"-\n";
                                }                        
                            };
                            message.channel.send('```'+ response +'```');   
                        }
                    });
                });
            break;
        }
    },       

    'player' : async function ( message, args )
    {
        switch( args.shift() )
        {
            case 'path':
                // Return known history of player movements
                var username = args.join(' ');
                players.findOne({ username: username }, function( err, player ) {
                    if ( err ) 
                    {
                        message.channel.send('```'+ "No player data found for "+ username +'```');
                    } else {
                        if ( !!player )
                        {
                            chunkHistory.find({ player: player.id }).sort({ ts: -1 }).exec( function ( err, chunklist ) {
                                if ( err )
                                {
                                    console.log( err );
                                } else if ( !!chunklist ) {
                                    let limit = 20;
                                    var response  = '| Path History for '+ username +"\n";
                                        response += '|------------------'+ strrep('-', username.length+1) +"\n";
                                    if ( chunklist.length < limit ) { limit = chunklist.length; }
                                    for ( var i = 0; i < limit ; i++ ) {
                                        var elem = chunklist[i];
                                        response += "|["+ moment( elem.ts ).format( "YYYY/MM/DD HH:mm:ss" ) +"] "+ elem.chunk +"\n";
                                    }
                                    message.channel.send('```'+ response +'```');
                                } else {
                                    message.channel.send('```'+ "No path data found for "+ username +'```');
                                }
                            });
                        } else {
                            message.channel.send('```'+ "No player found for "+ username +'```');
                        }
                    }
                });
            break;
            
        }
    },

    'load' : async function( message, args )
    {
        switch( args.shift() )
        {
            case 'assets':
                // First verify the message author has correct permission
                if ( message.member.roles.some( x => discordRoles.admin.includes( x.id ) ))
                {
                    console.log( ts()+ "loading assets");
                    message.channel.send('```'+ "Loading ATT assets, please wait" +'```');

                    // Add the handler to pendingCommandList
                    pendingCommandList.push({
                        "command" : "spawn list",
                        "module" : "Alta.Console.Commands.SpawnCommandModule",
                        "handler": function ( response ) {
                            let countPrefabs = 0;
                            let responselines = response.split(/\n/)
                            responselines.forEach( function( line ) {
                                let found = line.match( /\|([^|]+)\|([^|]+)\|/ );
                                if ( found )
                                {
                                    found.shift(); // fulltext of match
                                    let num = new String( found.shift() ).trim() // ID of the prefab
                                    let val = new String( found.shift() ).trim() // The prefab name
                                    if ( num.match( /[0-9]+/ ) )
                                    {
                                        // It's a prefab!  Store it
                                        console.log( "found asset: "+ num +" | "+ val )
                                        spawnables.update({ hash: num }, { $set : { hash: num, name: val } }, { upsert: true }, updateHandler );
                                        countPrefabs++;
                                    }
                                }
                            });
                            message.channel.send( '```'+ "Found and stored "+ countPrefabs + " spawnable assets" +'```')
                        }
                     });

                     // Finally, execute the command
                     try {
                        botConnection.wrapper.send( "spwan list" );
                    } catch ( e ) {
                        console.log( e )
                        message.channel.send( '```'+ "Cannot send command, is server offline?" +'```')
                        return;
                    }
                     
                } else {
                    console.log( "invalid permission to load assets" );
                    message.channel.send('```'+ "You do not have the required permissions" +'```');
                }
            break;
        }
    },

    'spawn' : async function( message, args )
    {
        let playerName = args.shift();
        let asset = args.shift();
        let count = args.shift();
        if ( asset.indexOf(' ') > -1 )
        {
            asset = '"'+ asset +'"';
        }
        if ( !count )
        {
            count = 1;
        }

        // First, verify spawn permission for the users
        if ( message.member.roles.some( x => discordRoles.spawn.includes( x.id ) ))
        {
            // TODO assign permissions to each asset and check the permission here
            console.log( "Spawning an item: "+ asset +" ("+ count +") for "+ playerName )
            let command = "spawn " + playerName +' '+ asset +' '+ count;
            let cmdid = moment.valueOf();
            pendingCommandList.push({
                "id" : cmdid,
                "command" : command,
                "module" : "Alta.Console.Commands.SpawnCommandModule",
                "handler": function( response ) {
                    console.log( response );
                    let mresponse = response.replace(/Spawning/, "Spawned").replace(/ for/, '('+ count +') for');
                    message.channel.send('```'+ mresponse +'```');
                }
            });

            try {
                botConnection.wrapper.send( command );
            } catch ( e ) {
                console.log( e )
                message.channel.send( '```'+ "Cannot send command, is server offline?" +'```')
                return;
            }
            // This checks to see if the command was successful
            // The command is successful if there is no pendingCommandList item with the cmdid
            setTimeout( function() {
                let mpendingCommand = pendingCommandList.find( x => x.id === cmdid );
                if ( mpendingCommand !== undefined && mpendingCommand.id === cmdid )
                {
                    // remove the element to prevent erroneous messages later
                    for ( var i = 0; i < pendingCommandList.length; i++ )
                    {
                        if ( pendingCommandList[i].id === cmdid )
                        {
                            pendingCommandList.splice(i,1);
                            break;
                        }
                    }
                    message.channel.send( '```'+ "Spawn command failed: "+ command +'```' );
                }
            }, 10000 )

        } else {
            console.log( "invalid permission to load assets: " + message.author.username )
            message.channel.send('```'+ "You do not have the required permissions to spawn item: " + asset +'```')
        }
    },

    'trade' : async function( message, args )
    {
        switch( args.shift() )
        {
            case 'post':
                // Spawn items in the player's mailbox
                let playerName = args.shift();
                let asset = args.shift();
                let count = args.shift();
                if ( asset.indexOf(' ') > -1 )
                {
                    asset = '"'+ asset +'"';
                }
                if ( !count )
                {
                    count = 1;
                }
                // First, verify spawn permission for the users
                if ( message.member.roles.some( x => discordRoles.spawn.includes( x.id ) ))
                {
                    // TODO assign permissions to each asset and check the permission here
                    console.log( "Mailing an item: "+ asset +" ("+ count +") for "+ playerName );
                    players.findOne({ username : playerName }, function( err, player ) {
                        if ( !!player && player.id !== undefined )
                        {
                            let command = "trade post "+ player.id +' '+ asset +' '+ count;
                            let cmdid = moment.valueOf();
                            
                            cmdItem = 
                            {
                                "id" : cmdid,
                                "command" : command,
                                "module" : "Alta.Console.CommandService",
                                "handler": function( response ) {
                                    let success = response.match(/(Started|Finished).*trade\.post/)
                                    if ( success !== null )
                                    {
                                        console.log( response );
                                        message.channel.send('```'+ "Mailed "+ asset +" ("+ count+") to "+ playerName +'```');
                                    }
                                }
                            };
                            pendingCommandList.push( cmdItem );
                            
                            try {
                                botConnection.wrapper.send( command );
                            } catch ( e ) {
                                console.log( e )
                                message.channel.send( '```'+ "Cannot send command, is server offline?" +'```')
                                return;
                            }
        
                            // This checks to see if the command was successful
                            // The command is successful if there is no pendingCommandList item with the cmdid
                            setTimeout( function() {
                                let mpendingCommand = pendingCommandList.find( x => x.id === cmdid );
                                if ( mpendingCommand !== undefined && mpendingCommand.id === cmdid )
                                {
                                    // remove the element to prevent erroneous messages later
                                    for ( var i = 0; i < pendingCommandList.length; i++ )
                                    {
                                        if ( pendingCommandList[i].id === cmdid )
                                        {
                                            pendingCommandList.splice(i,1);
                                            break;
                                        }
                                    }
                                    message.channel.send( '```'+ "Trade post command failed: "+ command +'```' );
                                }
                            }, 10000 )
                        } else {
                            message.channel.send( "Player "+ playerName +" is not known, or could not find player ID")
                        }
                    })
                } else {
                    console.log( "invalid permission to load assets: " + message.author.username )
                    message.channel.send('```'+ "You do not have the required permissions to post item: " + asset +'```')
                }
            break;
        }
    },

    'find' : async function( message, args )
    {
        switch( args.shift() )
        {
            case 'asset':
            case 'spawnable':
            case 'item':
                let mustMatch = args.join(' ');
                spawnables.find({ name : { $regex: new RegExp( mustMatch, 'gi' ) }}).sort({ name : 1 }).exec( function( err, results ) {
                    let response  = "| Spawnable items matching "+ mustMatch +" ("+ results.length +")\n";
                        response += "|--------------------------"+ strrep('-', mustMatch.length) + "-----\n";
                    let itemc = 0;
                    results.forEach( function( item ) {
                        let shortsp = '';
                        if ( item.hash.length < 5 ) { shortsp = ' '; }
                        response += "| "+ item.hash + shortsp + " | "+ item.name +"\n";
                        if ( itemc++ > 20 )
                        {
                            message.channel.send('```'+ response +'```')
                            itemc = 0;
                            response = '';
                        }
                    });
                    message.channel.send( '```'+ response +'```')
                })
            break;
        }
    }
}

function splitArgs( args )
{
    let spaceChars = '#s#';
    // If an exact match of the space character exists in the string, make it more unique
    while( args.indexOf( spaceChars ) > -1 ) { spaceChars += '|'; }

    // replace spaces which are inside quotes with the spaceChar placeholder
    let mangleargs = args.replace( /[“"]([^“^"]*)[“"]?/g, ( match, cap ) => {
        return cap.replace(/\s/g, spaceChars );
    });

    // split the padded string on actual spaces
    let newargs = mangleargs.split( /\ +/ );

    // replace the spaceChar in any matching elements with actual spaces
    let reg = new RegExp( spaceChars, 'g' );
    let argarr = newargs.map( ( x ) => { return x.replace( reg, ' ' ); });

    return argarr;
}

async function sleep( ms )
{
    await new Promise( resolve => setTimeout( resolve, ms ))
}

async function connectToServer( serverId )
{
    console.log( "Getting server details:" )
    var serverDetails = await Servers.joinConsole( serverId )
    console.log( serverDetails )
    return serverDetails
}

async function subscribeTo( subscription, callback )
{
    if ( serverConnectedState && ( typeof( botConnection.wrapper ) !== undefined ) )
    {        
        let state = await botConnection.wrapper.subscribe( subscription, callback )
        if (( typeof( state.Result ) == undefined ) || state.Result != 'Success' )
        {
            botConnection.wrapper.unsubscribe( subscription, callback )
            console.log( "Subscription to "+ subscription +" failed: ", state )
            setTimeout( function() { subscribeTo( subscription, callback ) }, subscriptionConnectInterval )
        } else {
            subscriptionsActive = true;
        }
    }
}

//Run the program
main();

async function main()
{
    console.log( ts() + "bot is starting" );

    // Convert the password to a hash if necessary
    var mpassword = convertPassToHash( username, password, botToken );
    // Players in database
    //players.find({}).exec( function( err, docs ) { console.log( docs ); });

    //Connect to discord
    const discord = new Discord.Client();
    await new Promise( resolve =>
    {
        discord.on('ready', resolve);
        discord.login(botToken);
    });
    
    //Discord command and message management (todo: move to own lib)
    discord.on('message', message =>
    {
        if ( message.content.length > 0 && message.content.startsWith( discordPrefix ) )
        {
            var tmessage = message.content.substring(discordPrefix.length).trim();

            var args = splitArgs( tmessage );

            if ( args && args.length >= 1 )
            {
                var command = args.shift();
                var commandFunction = commands[command];
                if (!!commandFunction)
                {
                    commandFunction(message, args, tmessage);
                }
            }
        }
    });
                    
    var subs = new Subscriptions( discordChannels, players, kills, chunkHistory );

    //Alta Login
    //Sessions.loginWithHash(username, mpassword);
    const bot = new WebsocketBot();
    //Use a hashed password, SHA512
    await bot.loginWithHash(username, mpassword);
    while ( true ){
        
        console.log( "Checking "+ targetServer )
        var serverDetails = await Servers.getDetails( targetServer )
        //console.log( serverDetails )
        if ( typeof( serverDetails.online_ping ) === 'undefined' )
        {
            console.log( "Server is offline" )
            serverConnectedState = false
            if ( typeof( botConnection.wrapper ) != undefined && subscriptionsActive ) {
                console.log( "Removing subscriptions")
                botConnection.wrapper.emitter.removeAllListeners()
                subscriptionsActive = false;
            }
        } else {
            if ( !serverConnectedState )
            {                    
                console.log( "Server is online, connecting...")
                var details = await Servers.joinConsole( targetServer )
                if ( details.allowed )
                {
                    console.log( details )
                    var connection = new Connection( details.name )
                    try
                    {
                        await connection.connect( details.connection.address, details.connection.websocket_port, details.token )
                    } catch( e ) {
                        "Cannot connect to server, error: "+ e.message
                        await sleep( connectInterval )
                        continue
                    }
                    serverConnectedState = true
                    var wrapper = new BasicWrapper( connection )

                    botConnection = 
                    {
                        "connection" : connection,
                        "wrapper" : wrapper
                    }         

                    console.log( ts() +"loading inital players" );
                    for ( var i in serverDetails.online_players )
                    {
                        let oplayer = serverDetails.online_players[i];
                        subs.PlayerJoined( discord, { "user": { "id": oplayer.id, "username": oplayer.username } });
                    }

                    // Subscriptions
                    subscribeTo( "InfoLog", data => { subs.InfoLog( discord, data ) } )
                    subscribeTo( "PlayerJoined", data => { subs.PlayerJoined( discord, data ) } )
                    subscribeTo( "PlayerLeft", data => { subs.PlayerLeft( discord, data ) } )
                    subscribeTo( "PlayerKilled", data => { subs.PlayerKilled( discord, data ) } )
                    subscribeTo( "TradeDeckUsed", data => { subs.TradeDeckUsed( discord, data ) } )
                    subscribeTo( "CreatureKilled", data => { subs.CreatureKilled( discord, data ) } )
                    subscribeTo( "PlayerMovedChunk", data => { subs.PlayerMovedChunk( discord, data ) } )

                    subscribeTo( "TraceLog", data => {
                        if ( pendingCommandList.length && data.logger === pendingCommandList[0].module )
                        {
                            console.log( "the command is a module match" )
                            // TODO: add a 'type' to pending commands to better match response items
                            let command = pendingCommandList.shift();
                            if ( command )
                            {
                                console.log( "executing handler" )
                                command.handler( data.message );
                            }
                        }
                    });

                } else {
                    console.log( "Server is not connectable")
                    serverConnectedState = false
                    console.log( connDetails)
                }
            } else {
                console.log( "Server is connected and alive")
            }
        }
        await sleep( serverPingInterval )
    }

    //Alta Login
    //const bot = new WebsocketBot();
    //Use a hashed password, SHA512
    //await bot.loginWithHash(username, mpassword);
    var subs = new Subscriptions( discordChannels, players, kills, chunkHistory );

    //When any of the 'targetServers' are available, a connection is automatically created.
    await bot.run(test => targetServers.includes(test.id), async (server, connection) =>
    {
        console.log( server );
        console.log( connection );

        //By default, connections simply receive commands, and emit messages.
        //To add callback support for events, we'll use the "BasicWrapper" provided by att-websockets.
        var wrapper = new BasicWrapper(connection);
        
        botConnection = 
        {
            "connection" : connection,
            "wrapper" : wrapper
        }

        console.log( ts() +"loading inital players" );
        for ( var i in server.online_players )
        {
            let oplayer = server.online_players[i];
            subs.PlayerJoined( discord, { "user": { "id": oplayer.id, "username": oplayer.username } });
        }

        // Subscriptions
        await wrapper.subscribe("PlayerJoined", data => { subs.PlayerJoined( discord, data ) }); 
        await wrapper.subscribe("PlayerLeft", data => { subs.PlayerLeft( discord, data ); });
        await wrapper.subscribe("PlayerKilled", data => { subs.PlayerKilled( discord, data ); });
        await wrapper.subscribe("TradeDeckUsed", data => { subs.TradeDeckUsed( discord, data ); });
        await wrapper.subscribe("CreatureKilled", data => { subs.CreatureKilled( discord, data ); });
        await wrapper.subscribe("PlayerMovedChunk", data => { subs.PlayerMovedChunk( discord, data ); });
        
        await wrapper.subscribe("TraceLog", data => {
            if ( pendingCommandList.length && data.logger === pendingCommandList[0].module )
            {
                console.log( "the command is a module match" )
                // TODO: add a 'type' to pending commands to better match response items
                let command = pendingCommandList.shift();
                if ( command )
                {
                    console.log( "executing handler" )
                    command.handler( data.message );
                }
            }
        });

    });
    // end bot.run()

}
